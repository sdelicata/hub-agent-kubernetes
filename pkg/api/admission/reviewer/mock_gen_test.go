// Code generated by mocktail; DO NOT EDIT.

package admission

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/api"
	"github.com/traefik/hub-agent-kubernetes/pkg/platform"
)

// portalServiceMock mock of portalService.
type portalServiceMock struct{ mock.Mock }

// newPortalServiceMock creates a new portalServiceMock.
func newPortalServiceMock(tb testing.TB) *portalServiceMock {
	tb.Helper()

	m := &portalServiceMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *portalServiceMock) CreatePortal(_ context.Context, req *platform.CreatePortalReq) (*api.Portal, error) {
	_ret := _m.Called(req)

	if _rf, ok := _ret.Get(0).(func(*platform.CreatePortalReq) (*api.Portal, error)); ok {
		return _rf(req)
	}

	_ra0, _ := _ret.Get(0).(*api.Portal)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *portalServiceMock) OnCreatePortal(req *platform.CreatePortalReq) *portalServiceCreatePortalCall {
	return &portalServiceCreatePortalCall{Call: _m.Mock.On("CreatePortal", req), Parent: _m}
}

func (_m *portalServiceMock) OnCreatePortalRaw(req interface{}) *portalServiceCreatePortalCall {
	return &portalServiceCreatePortalCall{Call: _m.Mock.On("CreatePortal", req), Parent: _m}
}

type portalServiceCreatePortalCall struct {
	*mock.Call
	Parent *portalServiceMock
}

func (_c *portalServiceCreatePortalCall) Panic(msg string) *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *portalServiceCreatePortalCall) Once() *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *portalServiceCreatePortalCall) Twice() *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *portalServiceCreatePortalCall) Times(i int) *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *portalServiceCreatePortalCall) WaitUntil(w <-chan time.Time) *portalServiceCreatePortalCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *portalServiceCreatePortalCall) After(d time.Duration) *portalServiceCreatePortalCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *portalServiceCreatePortalCall) Run(fn func(args mock.Arguments)) *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *portalServiceCreatePortalCall) Maybe() *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *portalServiceCreatePortalCall) TypedReturns(a *api.Portal, b error) *portalServiceCreatePortalCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *portalServiceCreatePortalCall) ReturnsFn(fn func(*platform.CreatePortalReq) (*api.Portal, error)) *portalServiceCreatePortalCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *portalServiceCreatePortalCall) TypedRun(fn func(*platform.CreatePortalReq)) *portalServiceCreatePortalCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_req, _ := args.Get(0).(*platform.CreatePortalReq)
		fn(_req)
	})
	return _c
}

func (_c *portalServiceCreatePortalCall) OnCreatePortal(req *platform.CreatePortalReq) *portalServiceCreatePortalCall {
	return _c.Parent.OnCreatePortal(req)
}

func (_c *portalServiceCreatePortalCall) OnDeletePortal(name string, lastKnownVersion string) *portalServiceDeletePortalCall {
	return _c.Parent.OnDeletePortal(name, lastKnownVersion)
}

func (_c *portalServiceCreatePortalCall) OnUpdatePortal(name string, lastKnownVersion string, req *platform.UpdatePortalReq) *portalServiceUpdatePortalCall {
	return _c.Parent.OnUpdatePortal(name, lastKnownVersion, req)
}

func (_c *portalServiceCreatePortalCall) OnCreatePortalRaw(req interface{}) *portalServiceCreatePortalCall {
	return _c.Parent.OnCreatePortalRaw(req)
}

func (_c *portalServiceCreatePortalCall) OnDeletePortalRaw(name interface{}, lastKnownVersion interface{}) *portalServiceDeletePortalCall {
	return _c.Parent.OnDeletePortalRaw(name, lastKnownVersion)
}

func (_c *portalServiceCreatePortalCall) OnUpdatePortalRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *portalServiceUpdatePortalCall {
	return _c.Parent.OnUpdatePortalRaw(name, lastKnownVersion, req)
}

func (_m *portalServiceMock) DeletePortal(_ context.Context, name string, lastKnownVersion string) error {
	_ret := _m.Called(name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *portalServiceMock) OnDeletePortal(name string, lastKnownVersion string) *portalServiceDeletePortalCall {
	return &portalServiceDeletePortalCall{Call: _m.Mock.On("DeletePortal", name, lastKnownVersion), Parent: _m}
}

func (_m *portalServiceMock) OnDeletePortalRaw(name interface{}, lastKnownVersion interface{}) *portalServiceDeletePortalCall {
	return &portalServiceDeletePortalCall{Call: _m.Mock.On("DeletePortal", name, lastKnownVersion), Parent: _m}
}

type portalServiceDeletePortalCall struct {
	*mock.Call
	Parent *portalServiceMock
}

func (_c *portalServiceDeletePortalCall) Panic(msg string) *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *portalServiceDeletePortalCall) Once() *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *portalServiceDeletePortalCall) Twice() *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *portalServiceDeletePortalCall) Times(i int) *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *portalServiceDeletePortalCall) WaitUntil(w <-chan time.Time) *portalServiceDeletePortalCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *portalServiceDeletePortalCall) After(d time.Duration) *portalServiceDeletePortalCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *portalServiceDeletePortalCall) Run(fn func(args mock.Arguments)) *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *portalServiceDeletePortalCall) Maybe() *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *portalServiceDeletePortalCall) TypedReturns(a error) *portalServiceDeletePortalCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *portalServiceDeletePortalCall) ReturnsFn(fn func(string, string) error) *portalServiceDeletePortalCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *portalServiceDeletePortalCall) TypedRun(fn func(string, string)) *portalServiceDeletePortalCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		fn(_name, _lastKnownVersion)
	})
	return _c
}

func (_c *portalServiceDeletePortalCall) OnCreatePortal(req *platform.CreatePortalReq) *portalServiceCreatePortalCall {
	return _c.Parent.OnCreatePortal(req)
}

func (_c *portalServiceDeletePortalCall) OnDeletePortal(name string, lastKnownVersion string) *portalServiceDeletePortalCall {
	return _c.Parent.OnDeletePortal(name, lastKnownVersion)
}

func (_c *portalServiceDeletePortalCall) OnUpdatePortal(name string, lastKnownVersion string, req *platform.UpdatePortalReq) *portalServiceUpdatePortalCall {
	return _c.Parent.OnUpdatePortal(name, lastKnownVersion, req)
}

func (_c *portalServiceDeletePortalCall) OnCreatePortalRaw(req interface{}) *portalServiceCreatePortalCall {
	return _c.Parent.OnCreatePortalRaw(req)
}

func (_c *portalServiceDeletePortalCall) OnDeletePortalRaw(name interface{}, lastKnownVersion interface{}) *portalServiceDeletePortalCall {
	return _c.Parent.OnDeletePortalRaw(name, lastKnownVersion)
}

func (_c *portalServiceDeletePortalCall) OnUpdatePortalRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *portalServiceUpdatePortalCall {
	return _c.Parent.OnUpdatePortalRaw(name, lastKnownVersion, req)
}

func (_m *portalServiceMock) UpdatePortal(_ context.Context, name string, lastKnownVersion string, req *platform.UpdatePortalReq) (*api.Portal, error) {
	_ret := _m.Called(name, lastKnownVersion, req)

	if _rf, ok := _ret.Get(0).(func(string, string, *platform.UpdatePortalReq) (*api.Portal, error)); ok {
		return _rf(name, lastKnownVersion, req)
	}

	_ra0, _ := _ret.Get(0).(*api.Portal)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *portalServiceMock) OnUpdatePortal(name string, lastKnownVersion string, req *platform.UpdatePortalReq) *portalServiceUpdatePortalCall {
	return &portalServiceUpdatePortalCall{Call: _m.Mock.On("UpdatePortal", name, lastKnownVersion, req), Parent: _m}
}

func (_m *portalServiceMock) OnUpdatePortalRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *portalServiceUpdatePortalCall {
	return &portalServiceUpdatePortalCall{Call: _m.Mock.On("UpdatePortal", name, lastKnownVersion, req), Parent: _m}
}

type portalServiceUpdatePortalCall struct {
	*mock.Call
	Parent *portalServiceMock
}

func (_c *portalServiceUpdatePortalCall) Panic(msg string) *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *portalServiceUpdatePortalCall) Once() *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *portalServiceUpdatePortalCall) Twice() *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *portalServiceUpdatePortalCall) Times(i int) *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *portalServiceUpdatePortalCall) WaitUntil(w <-chan time.Time) *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *portalServiceUpdatePortalCall) After(d time.Duration) *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *portalServiceUpdatePortalCall) Run(fn func(args mock.Arguments)) *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *portalServiceUpdatePortalCall) Maybe() *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *portalServiceUpdatePortalCall) TypedReturns(a *api.Portal, b error) *portalServiceUpdatePortalCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *portalServiceUpdatePortalCall) ReturnsFn(fn func(string, string, *platform.UpdatePortalReq) (*api.Portal, error)) *portalServiceUpdatePortalCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *portalServiceUpdatePortalCall) TypedRun(fn func(string, string, *platform.UpdatePortalReq)) *portalServiceUpdatePortalCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		_req, _ := args.Get(2).(*platform.UpdatePortalReq)
		fn(_name, _lastKnownVersion, _req)
	})
	return _c
}

func (_c *portalServiceUpdatePortalCall) OnCreatePortal(req *platform.CreatePortalReq) *portalServiceCreatePortalCall {
	return _c.Parent.OnCreatePortal(req)
}

func (_c *portalServiceUpdatePortalCall) OnDeletePortal(name string, lastKnownVersion string) *portalServiceDeletePortalCall {
	return _c.Parent.OnDeletePortal(name, lastKnownVersion)
}

func (_c *portalServiceUpdatePortalCall) OnUpdatePortal(name string, lastKnownVersion string, req *platform.UpdatePortalReq) *portalServiceUpdatePortalCall {
	return _c.Parent.OnUpdatePortal(name, lastKnownVersion, req)
}

func (_c *portalServiceUpdatePortalCall) OnCreatePortalRaw(req interface{}) *portalServiceCreatePortalCall {
	return _c.Parent.OnCreatePortalRaw(req)
}

func (_c *portalServiceUpdatePortalCall) OnDeletePortalRaw(name interface{}, lastKnownVersion interface{}) *portalServiceDeletePortalCall {
	return _c.Parent.OnDeletePortalRaw(name, lastKnownVersion)
}

func (_c *portalServiceUpdatePortalCall) OnUpdatePortalRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *portalServiceUpdatePortalCall {
	return _c.Parent.OnUpdatePortalRaw(name, lastKnownVersion, req)
}

// gatewayServiceMock mock of gatewayService.
type gatewayServiceMock struct{ mock.Mock }

// newGatewayServiceMock creates a new gatewayServiceMock.
func newGatewayServiceMock(tb testing.TB) *gatewayServiceMock {
	tb.Helper()

	m := &gatewayServiceMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *gatewayServiceMock) CreateGateway(_ context.Context, createReq *platform.CreateGatewayReq) (*api.Gateway, error) {
	_ret := _m.Called(createReq)

	if _rf, ok := _ret.Get(0).(func(*platform.CreateGatewayReq) (*api.Gateway, error)); ok {
		return _rf(createReq)
	}

	_ra0, _ := _ret.Get(0).(*api.Gateway)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *gatewayServiceMock) OnCreateGateway(createReq *platform.CreateGatewayReq) *gatewayServiceCreateGatewayCall {
	return &gatewayServiceCreateGatewayCall{Call: _m.Mock.On("CreateGateway", createReq), Parent: _m}
}

func (_m *gatewayServiceMock) OnCreateGatewayRaw(createReq interface{}) *gatewayServiceCreateGatewayCall {
	return &gatewayServiceCreateGatewayCall{Call: _m.Mock.On("CreateGateway", createReq), Parent: _m}
}

type gatewayServiceCreateGatewayCall struct {
	*mock.Call
	Parent *gatewayServiceMock
}

func (_c *gatewayServiceCreateGatewayCall) Panic(msg string) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) Once() *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) Twice() *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) Times(i int) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) WaitUntil(w <-chan time.Time) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) After(d time.Duration) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) Run(fn func(args mock.Arguments)) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) Maybe() *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) TypedReturns(a *api.Gateway, b error) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) ReturnsFn(fn func(*platform.CreateGatewayReq) (*api.Gateway, error)) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) TypedRun(fn func(*platform.CreateGatewayReq)) *gatewayServiceCreateGatewayCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_createReq, _ := args.Get(0).(*platform.CreateGatewayReq)
		fn(_createReq)
	})
	return _c
}

func (_c *gatewayServiceCreateGatewayCall) OnCreateGateway(createReq *platform.CreateGatewayReq) *gatewayServiceCreateGatewayCall {
	return _c.Parent.OnCreateGateway(createReq)
}

func (_c *gatewayServiceCreateGatewayCall) OnDeleteGateway(name string, lastKnownVersion string) *gatewayServiceDeleteGatewayCall {
	return _c.Parent.OnDeleteGateway(name, lastKnownVersion)
}

func (_c *gatewayServiceCreateGatewayCall) OnUpdateGateway(name string, lastKnownVersion string, updateReq *platform.UpdateGatewayReq) *gatewayServiceUpdateGatewayCall {
	return _c.Parent.OnUpdateGateway(name, lastKnownVersion, updateReq)
}

func (_c *gatewayServiceCreateGatewayCall) OnCreateGatewayRaw(createReq interface{}) *gatewayServiceCreateGatewayCall {
	return _c.Parent.OnCreateGatewayRaw(createReq)
}

func (_c *gatewayServiceCreateGatewayCall) OnDeleteGatewayRaw(name interface{}, lastKnownVersion interface{}) *gatewayServiceDeleteGatewayCall {
	return _c.Parent.OnDeleteGatewayRaw(name, lastKnownVersion)
}

func (_c *gatewayServiceCreateGatewayCall) OnUpdateGatewayRaw(name interface{}, lastKnownVersion interface{}, updateReq interface{}) *gatewayServiceUpdateGatewayCall {
	return _c.Parent.OnUpdateGatewayRaw(name, lastKnownVersion, updateReq)
}

func (_m *gatewayServiceMock) DeleteGateway(_ context.Context, name string, lastKnownVersion string) error {
	_ret := _m.Called(name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *gatewayServiceMock) OnDeleteGateway(name string, lastKnownVersion string) *gatewayServiceDeleteGatewayCall {
	return &gatewayServiceDeleteGatewayCall{Call: _m.Mock.On("DeleteGateway", name, lastKnownVersion), Parent: _m}
}

func (_m *gatewayServiceMock) OnDeleteGatewayRaw(name interface{}, lastKnownVersion interface{}) *gatewayServiceDeleteGatewayCall {
	return &gatewayServiceDeleteGatewayCall{Call: _m.Mock.On("DeleteGateway", name, lastKnownVersion), Parent: _m}
}

type gatewayServiceDeleteGatewayCall struct {
	*mock.Call
	Parent *gatewayServiceMock
}

func (_c *gatewayServiceDeleteGatewayCall) Panic(msg string) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) Once() *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) Twice() *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) Times(i int) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) WaitUntil(w <-chan time.Time) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) After(d time.Duration) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) Run(fn func(args mock.Arguments)) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) Maybe() *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) TypedReturns(a error) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) ReturnsFn(fn func(string, string) error) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) TypedRun(fn func(string, string)) *gatewayServiceDeleteGatewayCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		fn(_name, _lastKnownVersion)
	})
	return _c
}

func (_c *gatewayServiceDeleteGatewayCall) OnCreateGateway(createReq *platform.CreateGatewayReq) *gatewayServiceCreateGatewayCall {
	return _c.Parent.OnCreateGateway(createReq)
}

func (_c *gatewayServiceDeleteGatewayCall) OnDeleteGateway(name string, lastKnownVersion string) *gatewayServiceDeleteGatewayCall {
	return _c.Parent.OnDeleteGateway(name, lastKnownVersion)
}

func (_c *gatewayServiceDeleteGatewayCall) OnUpdateGateway(name string, lastKnownVersion string, updateReq *platform.UpdateGatewayReq) *gatewayServiceUpdateGatewayCall {
	return _c.Parent.OnUpdateGateway(name, lastKnownVersion, updateReq)
}

func (_c *gatewayServiceDeleteGatewayCall) OnCreateGatewayRaw(createReq interface{}) *gatewayServiceCreateGatewayCall {
	return _c.Parent.OnCreateGatewayRaw(createReq)
}

func (_c *gatewayServiceDeleteGatewayCall) OnDeleteGatewayRaw(name interface{}, lastKnownVersion interface{}) *gatewayServiceDeleteGatewayCall {
	return _c.Parent.OnDeleteGatewayRaw(name, lastKnownVersion)
}

func (_c *gatewayServiceDeleteGatewayCall) OnUpdateGatewayRaw(name interface{}, lastKnownVersion interface{}, updateReq interface{}) *gatewayServiceUpdateGatewayCall {
	return _c.Parent.OnUpdateGatewayRaw(name, lastKnownVersion, updateReq)
}

func (_m *gatewayServiceMock) UpdateGateway(_ context.Context, name string, lastKnownVersion string, updateReq *platform.UpdateGatewayReq) (*api.Gateway, error) {
	_ret := _m.Called(name, lastKnownVersion, updateReq)

	if _rf, ok := _ret.Get(0).(func(string, string, *platform.UpdateGatewayReq) (*api.Gateway, error)); ok {
		return _rf(name, lastKnownVersion, updateReq)
	}

	_ra0, _ := _ret.Get(0).(*api.Gateway)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *gatewayServiceMock) OnUpdateGateway(name string, lastKnownVersion string, updateReq *platform.UpdateGatewayReq) *gatewayServiceUpdateGatewayCall {
	return &gatewayServiceUpdateGatewayCall{Call: _m.Mock.On("UpdateGateway", name, lastKnownVersion, updateReq), Parent: _m}
}

func (_m *gatewayServiceMock) OnUpdateGatewayRaw(name interface{}, lastKnownVersion interface{}, updateReq interface{}) *gatewayServiceUpdateGatewayCall {
	return &gatewayServiceUpdateGatewayCall{Call: _m.Mock.On("UpdateGateway", name, lastKnownVersion, updateReq), Parent: _m}
}

type gatewayServiceUpdateGatewayCall struct {
	*mock.Call
	Parent *gatewayServiceMock
}

func (_c *gatewayServiceUpdateGatewayCall) Panic(msg string) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) Once() *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) Twice() *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) Times(i int) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) WaitUntil(w <-chan time.Time) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) After(d time.Duration) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) Run(fn func(args mock.Arguments)) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) Maybe() *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) TypedReturns(a *api.Gateway, b error) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) ReturnsFn(fn func(string, string, *platform.UpdateGatewayReq) (*api.Gateway, error)) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) TypedRun(fn func(string, string, *platform.UpdateGatewayReq)) *gatewayServiceUpdateGatewayCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		_updateReq, _ := args.Get(2).(*platform.UpdateGatewayReq)
		fn(_name, _lastKnownVersion, _updateReq)
	})
	return _c
}

func (_c *gatewayServiceUpdateGatewayCall) OnCreateGateway(createReq *platform.CreateGatewayReq) *gatewayServiceCreateGatewayCall {
	return _c.Parent.OnCreateGateway(createReq)
}

func (_c *gatewayServiceUpdateGatewayCall) OnDeleteGateway(name string, lastKnownVersion string) *gatewayServiceDeleteGatewayCall {
	return _c.Parent.OnDeleteGateway(name, lastKnownVersion)
}

func (_c *gatewayServiceUpdateGatewayCall) OnUpdateGateway(name string, lastKnownVersion string, updateReq *platform.UpdateGatewayReq) *gatewayServiceUpdateGatewayCall {
	return _c.Parent.OnUpdateGateway(name, lastKnownVersion, updateReq)
}

func (_c *gatewayServiceUpdateGatewayCall) OnCreateGatewayRaw(createReq interface{}) *gatewayServiceCreateGatewayCall {
	return _c.Parent.OnCreateGatewayRaw(createReq)
}

func (_c *gatewayServiceUpdateGatewayCall) OnDeleteGatewayRaw(name interface{}, lastKnownVersion interface{}) *gatewayServiceDeleteGatewayCall {
	return _c.Parent.OnDeleteGatewayRaw(name, lastKnownVersion)
}

func (_c *gatewayServiceUpdateGatewayCall) OnUpdateGatewayRaw(name interface{}, lastKnownVersion interface{}, updateReq interface{}) *gatewayServiceUpdateGatewayCall {
	return _c.Parent.OnUpdateGatewayRaw(name, lastKnownVersion, updateReq)
}

// apiServiceMock mock of apiService.
type apiServiceMock struct{ mock.Mock }

// newAPIServiceMock creates a new apiServiceMock.
func newAPIServiceMock(tb testing.TB) *apiServiceMock {
	tb.Helper()

	m := &apiServiceMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *apiServiceMock) CreateAPI(_ context.Context, req *platform.CreateAPIReq) (*api.API, error) {
	_ret := _m.Called(req)

	if _rf, ok := _ret.Get(0).(func(*platform.CreateAPIReq) (*api.API, error)); ok {
		return _rf(req)
	}

	_ra0, _ := _ret.Get(0).(*api.API)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *apiServiceMock) OnCreateAPI(req *platform.CreateAPIReq) *apiServiceCreateAPICall {
	return &apiServiceCreateAPICall{Call: _m.Mock.On("CreateAPI", req), Parent: _m}
}

func (_m *apiServiceMock) OnCreateAPIRaw(req interface{}) *apiServiceCreateAPICall {
	return &apiServiceCreateAPICall{Call: _m.Mock.On("CreateAPI", req), Parent: _m}
}

type apiServiceCreateAPICall struct {
	*mock.Call
	Parent *apiServiceMock
}

func (_c *apiServiceCreateAPICall) Panic(msg string) *apiServiceCreateAPICall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *apiServiceCreateAPICall) Once() *apiServiceCreateAPICall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *apiServiceCreateAPICall) Twice() *apiServiceCreateAPICall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *apiServiceCreateAPICall) Times(i int) *apiServiceCreateAPICall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *apiServiceCreateAPICall) WaitUntil(w <-chan time.Time) *apiServiceCreateAPICall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *apiServiceCreateAPICall) After(d time.Duration) *apiServiceCreateAPICall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *apiServiceCreateAPICall) Run(fn func(args mock.Arguments)) *apiServiceCreateAPICall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *apiServiceCreateAPICall) Maybe() *apiServiceCreateAPICall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *apiServiceCreateAPICall) TypedReturns(a *api.API, b error) *apiServiceCreateAPICall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *apiServiceCreateAPICall) ReturnsFn(fn func(*platform.CreateAPIReq) (*api.API, error)) *apiServiceCreateAPICall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *apiServiceCreateAPICall) TypedRun(fn func(*platform.CreateAPIReq)) *apiServiceCreateAPICall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_req, _ := args.Get(0).(*platform.CreateAPIReq)
		fn(_req)
	})
	return _c
}

func (_c *apiServiceCreateAPICall) OnCreateAPI(req *platform.CreateAPIReq) *apiServiceCreateAPICall {
	return _c.Parent.OnCreateAPI(req)
}

func (_c *apiServiceCreateAPICall) OnDeleteAPI(namespace string, name string, lastKnownVersion string) *apiServiceDeleteAPICall {
	return _c.Parent.OnDeleteAPI(namespace, name, lastKnownVersion)
}

func (_c *apiServiceCreateAPICall) OnUpdateAPI(namespace string, name string, lastKnownVersion string, req *platform.UpdateAPIReq) *apiServiceUpdateAPICall {
	return _c.Parent.OnUpdateAPI(namespace, name, lastKnownVersion, req)
}

func (_c *apiServiceCreateAPICall) OnCreateAPIRaw(req interface{}) *apiServiceCreateAPICall {
	return _c.Parent.OnCreateAPIRaw(req)
}

func (_c *apiServiceCreateAPICall) OnDeleteAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *apiServiceDeleteAPICall {
	return _c.Parent.OnDeleteAPIRaw(namespace, name, lastKnownVersion)
}

func (_c *apiServiceCreateAPICall) OnUpdateAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, req interface{}) *apiServiceUpdateAPICall {
	return _c.Parent.OnUpdateAPIRaw(namespace, name, lastKnownVersion, req)
}

func (_m *apiServiceMock) DeleteAPI(_ context.Context, namespace string, name string, lastKnownVersion string) error {
	_ret := _m.Called(namespace, name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string, string) error); ok {
		return _rf(namespace, name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *apiServiceMock) OnDeleteAPI(namespace string, name string, lastKnownVersion string) *apiServiceDeleteAPICall {
	return &apiServiceDeleteAPICall{Call: _m.Mock.On("DeleteAPI", namespace, name, lastKnownVersion), Parent: _m}
}

func (_m *apiServiceMock) OnDeleteAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *apiServiceDeleteAPICall {
	return &apiServiceDeleteAPICall{Call: _m.Mock.On("DeleteAPI", namespace, name, lastKnownVersion), Parent: _m}
}

type apiServiceDeleteAPICall struct {
	*mock.Call
	Parent *apiServiceMock
}

func (_c *apiServiceDeleteAPICall) Panic(msg string) *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *apiServiceDeleteAPICall) Once() *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *apiServiceDeleteAPICall) Twice() *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *apiServiceDeleteAPICall) Times(i int) *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *apiServiceDeleteAPICall) WaitUntil(w <-chan time.Time) *apiServiceDeleteAPICall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *apiServiceDeleteAPICall) After(d time.Duration) *apiServiceDeleteAPICall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *apiServiceDeleteAPICall) Run(fn func(args mock.Arguments)) *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *apiServiceDeleteAPICall) Maybe() *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *apiServiceDeleteAPICall) TypedReturns(a error) *apiServiceDeleteAPICall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *apiServiceDeleteAPICall) ReturnsFn(fn func(string, string, string) error) *apiServiceDeleteAPICall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *apiServiceDeleteAPICall) TypedRun(fn func(string, string, string)) *apiServiceDeleteAPICall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_namespace := args.String(0)
		_name := args.String(1)
		_lastKnownVersion := args.String(2)
		fn(_namespace, _name, _lastKnownVersion)
	})
	return _c
}

func (_c *apiServiceDeleteAPICall) OnCreateAPI(req *platform.CreateAPIReq) *apiServiceCreateAPICall {
	return _c.Parent.OnCreateAPI(req)
}

func (_c *apiServiceDeleteAPICall) OnDeleteAPI(namespace string, name string, lastKnownVersion string) *apiServiceDeleteAPICall {
	return _c.Parent.OnDeleteAPI(namespace, name, lastKnownVersion)
}

func (_c *apiServiceDeleteAPICall) OnUpdateAPI(namespace string, name string, lastKnownVersion string, req *platform.UpdateAPIReq) *apiServiceUpdateAPICall {
	return _c.Parent.OnUpdateAPI(namespace, name, lastKnownVersion, req)
}

func (_c *apiServiceDeleteAPICall) OnCreateAPIRaw(req interface{}) *apiServiceCreateAPICall {
	return _c.Parent.OnCreateAPIRaw(req)
}

func (_c *apiServiceDeleteAPICall) OnDeleteAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *apiServiceDeleteAPICall {
	return _c.Parent.OnDeleteAPIRaw(namespace, name, lastKnownVersion)
}

func (_c *apiServiceDeleteAPICall) OnUpdateAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, req interface{}) *apiServiceUpdateAPICall {
	return _c.Parent.OnUpdateAPIRaw(namespace, name, lastKnownVersion, req)
}

func (_m *apiServiceMock) UpdateAPI(_ context.Context, namespace string, name string, lastKnownVersion string, req *platform.UpdateAPIReq) (*api.API, error) {
	_ret := _m.Called(namespace, name, lastKnownVersion, req)

	if _rf, ok := _ret.Get(0).(func(string, string, string, *platform.UpdateAPIReq) (*api.API, error)); ok {
		return _rf(namespace, name, lastKnownVersion, req)
	}

	_ra0, _ := _ret.Get(0).(*api.API)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *apiServiceMock) OnUpdateAPI(namespace string, name string, lastKnownVersion string, req *platform.UpdateAPIReq) *apiServiceUpdateAPICall {
	return &apiServiceUpdateAPICall{Call: _m.Mock.On("UpdateAPI", namespace, name, lastKnownVersion, req), Parent: _m}
}

func (_m *apiServiceMock) OnUpdateAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, req interface{}) *apiServiceUpdateAPICall {
	return &apiServiceUpdateAPICall{Call: _m.Mock.On("UpdateAPI", namespace, name, lastKnownVersion, req), Parent: _m}
}

type apiServiceUpdateAPICall struct {
	*mock.Call
	Parent *apiServiceMock
}

func (_c *apiServiceUpdateAPICall) Panic(msg string) *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *apiServiceUpdateAPICall) Once() *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *apiServiceUpdateAPICall) Twice() *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *apiServiceUpdateAPICall) Times(i int) *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *apiServiceUpdateAPICall) WaitUntil(w <-chan time.Time) *apiServiceUpdateAPICall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *apiServiceUpdateAPICall) After(d time.Duration) *apiServiceUpdateAPICall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *apiServiceUpdateAPICall) Run(fn func(args mock.Arguments)) *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *apiServiceUpdateAPICall) Maybe() *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *apiServiceUpdateAPICall) TypedReturns(a *api.API, b error) *apiServiceUpdateAPICall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *apiServiceUpdateAPICall) ReturnsFn(fn func(string, string, string, *platform.UpdateAPIReq) (*api.API, error)) *apiServiceUpdateAPICall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *apiServiceUpdateAPICall) TypedRun(fn func(string, string, string, *platform.UpdateAPIReq)) *apiServiceUpdateAPICall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_namespace := args.String(0)
		_name := args.String(1)
		_lastKnownVersion := args.String(2)
		_req, _ := args.Get(3).(*platform.UpdateAPIReq)
		fn(_namespace, _name, _lastKnownVersion, _req)
	})
	return _c
}

func (_c *apiServiceUpdateAPICall) OnCreateAPI(req *platform.CreateAPIReq) *apiServiceCreateAPICall {
	return _c.Parent.OnCreateAPI(req)
}

func (_c *apiServiceUpdateAPICall) OnDeleteAPI(namespace string, name string, lastKnownVersion string) *apiServiceDeleteAPICall {
	return _c.Parent.OnDeleteAPI(namespace, name, lastKnownVersion)
}

func (_c *apiServiceUpdateAPICall) OnUpdateAPI(namespace string, name string, lastKnownVersion string, req *platform.UpdateAPIReq) *apiServiceUpdateAPICall {
	return _c.Parent.OnUpdateAPI(namespace, name, lastKnownVersion, req)
}

func (_c *apiServiceUpdateAPICall) OnCreateAPIRaw(req interface{}) *apiServiceCreateAPICall {
	return _c.Parent.OnCreateAPIRaw(req)
}

func (_c *apiServiceUpdateAPICall) OnDeleteAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}) *apiServiceDeleteAPICall {
	return _c.Parent.OnDeleteAPIRaw(namespace, name, lastKnownVersion)
}

func (_c *apiServiceUpdateAPICall) OnUpdateAPIRaw(namespace interface{}, name interface{}, lastKnownVersion interface{}, req interface{}) *apiServiceUpdateAPICall {
	return _c.Parent.OnUpdateAPIRaw(namespace, name, lastKnownVersion, req)
}

// collectionServiceMock mock of collectionService.
type collectionServiceMock struct{ mock.Mock }

// newCollectionServiceMock creates a new collectionServiceMock.
func newCollectionServiceMock(tb testing.TB) *collectionServiceMock {
	tb.Helper()

	m := &collectionServiceMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *collectionServiceMock) CreateCollection(_ context.Context, req *platform.CreateCollectionReq) (*api.Collection, error) {
	_ret := _m.Called(req)

	if _rf, ok := _ret.Get(0).(func(*platform.CreateCollectionReq) (*api.Collection, error)); ok {
		return _rf(req)
	}

	_ra0, _ := _ret.Get(0).(*api.Collection)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *collectionServiceMock) OnCreateCollection(req *platform.CreateCollectionReq) *collectionServiceCreateCollectionCall {
	return &collectionServiceCreateCollectionCall{Call: _m.Mock.On("CreateCollection", req), Parent: _m}
}

func (_m *collectionServiceMock) OnCreateCollectionRaw(req interface{}) *collectionServiceCreateCollectionCall {
	return &collectionServiceCreateCollectionCall{Call: _m.Mock.On("CreateCollection", req), Parent: _m}
}

type collectionServiceCreateCollectionCall struct {
	*mock.Call
	Parent *collectionServiceMock
}

func (_c *collectionServiceCreateCollectionCall) Panic(msg string) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) Once() *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *collectionServiceCreateCollectionCall) Twice() *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *collectionServiceCreateCollectionCall) Times(i int) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) WaitUntil(w <-chan time.Time) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) After(d time.Duration) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) Run(fn func(args mock.Arguments)) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) Maybe() *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *collectionServiceCreateCollectionCall) TypedReturns(a *api.Collection, b error) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) ReturnsFn(fn func(*platform.CreateCollectionReq) (*api.Collection, error)) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *collectionServiceCreateCollectionCall) TypedRun(fn func(*platform.CreateCollectionReq)) *collectionServiceCreateCollectionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_req, _ := args.Get(0).(*platform.CreateCollectionReq)
		fn(_req)
	})
	return _c
}

func (_c *collectionServiceCreateCollectionCall) OnCreateCollection(req *platform.CreateCollectionReq) *collectionServiceCreateCollectionCall {
	return _c.Parent.OnCreateCollection(req)
}

func (_c *collectionServiceCreateCollectionCall) OnDeleteCollection(name string, lastKnownVersion string) *collectionServiceDeleteCollectionCall {
	return _c.Parent.OnDeleteCollection(name, lastKnownVersion)
}

func (_c *collectionServiceCreateCollectionCall) OnUpdateCollection(name string, lastKnownVersion string, req *platform.UpdateCollectionReq) *collectionServiceUpdateCollectionCall {
	return _c.Parent.OnUpdateCollection(name, lastKnownVersion, req)
}

func (_c *collectionServiceCreateCollectionCall) OnCreateCollectionRaw(req interface{}) *collectionServiceCreateCollectionCall {
	return _c.Parent.OnCreateCollectionRaw(req)
}

func (_c *collectionServiceCreateCollectionCall) OnDeleteCollectionRaw(name interface{}, lastKnownVersion interface{}) *collectionServiceDeleteCollectionCall {
	return _c.Parent.OnDeleteCollectionRaw(name, lastKnownVersion)
}

func (_c *collectionServiceCreateCollectionCall) OnUpdateCollectionRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *collectionServiceUpdateCollectionCall {
	return _c.Parent.OnUpdateCollectionRaw(name, lastKnownVersion, req)
}

func (_m *collectionServiceMock) DeleteCollection(_ context.Context, name string, lastKnownVersion string) error {
	_ret := _m.Called(name, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(name, lastKnownVersion)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *collectionServiceMock) OnDeleteCollection(name string, lastKnownVersion string) *collectionServiceDeleteCollectionCall {
	return &collectionServiceDeleteCollectionCall{Call: _m.Mock.On("DeleteCollection", name, lastKnownVersion), Parent: _m}
}

func (_m *collectionServiceMock) OnDeleteCollectionRaw(name interface{}, lastKnownVersion interface{}) *collectionServiceDeleteCollectionCall {
	return &collectionServiceDeleteCollectionCall{Call: _m.Mock.On("DeleteCollection", name, lastKnownVersion), Parent: _m}
}

type collectionServiceDeleteCollectionCall struct {
	*mock.Call
	Parent *collectionServiceMock
}

func (_c *collectionServiceDeleteCollectionCall) Panic(msg string) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) Once() *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) Twice() *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) Times(i int) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) WaitUntil(w <-chan time.Time) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) After(d time.Duration) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) Run(fn func(args mock.Arguments)) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) Maybe() *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) TypedReturns(a error) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) ReturnsFn(fn func(string, string) error) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) TypedRun(fn func(string, string)) *collectionServiceDeleteCollectionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		fn(_name, _lastKnownVersion)
	})
	return _c
}

func (_c *collectionServiceDeleteCollectionCall) OnCreateCollection(req *platform.CreateCollectionReq) *collectionServiceCreateCollectionCall {
	return _c.Parent.OnCreateCollection(req)
}

func (_c *collectionServiceDeleteCollectionCall) OnDeleteCollection(name string, lastKnownVersion string) *collectionServiceDeleteCollectionCall {
	return _c.Parent.OnDeleteCollection(name, lastKnownVersion)
}

func (_c *collectionServiceDeleteCollectionCall) OnUpdateCollection(name string, lastKnownVersion string, req *platform.UpdateCollectionReq) *collectionServiceUpdateCollectionCall {
	return _c.Parent.OnUpdateCollection(name, lastKnownVersion, req)
}

func (_c *collectionServiceDeleteCollectionCall) OnCreateCollectionRaw(req interface{}) *collectionServiceCreateCollectionCall {
	return _c.Parent.OnCreateCollectionRaw(req)
}

func (_c *collectionServiceDeleteCollectionCall) OnDeleteCollectionRaw(name interface{}, lastKnownVersion interface{}) *collectionServiceDeleteCollectionCall {
	return _c.Parent.OnDeleteCollectionRaw(name, lastKnownVersion)
}

func (_c *collectionServiceDeleteCollectionCall) OnUpdateCollectionRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *collectionServiceUpdateCollectionCall {
	return _c.Parent.OnUpdateCollectionRaw(name, lastKnownVersion, req)
}

func (_m *collectionServiceMock) UpdateCollection(_ context.Context, name string, lastKnownVersion string, req *platform.UpdateCollectionReq) (*api.Collection, error) {
	_ret := _m.Called(name, lastKnownVersion, req)

	if _rf, ok := _ret.Get(0).(func(string, string, *platform.UpdateCollectionReq) (*api.Collection, error)); ok {
		return _rf(name, lastKnownVersion, req)
	}

	_ra0, _ := _ret.Get(0).(*api.Collection)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *collectionServiceMock) OnUpdateCollection(name string, lastKnownVersion string, req *platform.UpdateCollectionReq) *collectionServiceUpdateCollectionCall {
	return &collectionServiceUpdateCollectionCall{Call: _m.Mock.On("UpdateCollection", name, lastKnownVersion, req), Parent: _m}
}

func (_m *collectionServiceMock) OnUpdateCollectionRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *collectionServiceUpdateCollectionCall {
	return &collectionServiceUpdateCollectionCall{Call: _m.Mock.On("UpdateCollection", name, lastKnownVersion, req), Parent: _m}
}

type collectionServiceUpdateCollectionCall struct {
	*mock.Call
	Parent *collectionServiceMock
}

func (_c *collectionServiceUpdateCollectionCall) Panic(msg string) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) Once() *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) Twice() *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) Times(i int) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) WaitUntil(w <-chan time.Time) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) After(d time.Duration) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) Run(fn func(args mock.Arguments)) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) Maybe() *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) TypedReturns(a *api.Collection, b error) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) ReturnsFn(fn func(string, string, *platform.UpdateCollectionReq) (*api.Collection, error)) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) TypedRun(fn func(string, string, *platform.UpdateCollectionReq)) *collectionServiceUpdateCollectionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_lastKnownVersion := args.String(1)
		_req, _ := args.Get(2).(*platform.UpdateCollectionReq)
		fn(_name, _lastKnownVersion, _req)
	})
	return _c
}

func (_c *collectionServiceUpdateCollectionCall) OnCreateCollection(req *platform.CreateCollectionReq) *collectionServiceCreateCollectionCall {
	return _c.Parent.OnCreateCollection(req)
}

func (_c *collectionServiceUpdateCollectionCall) OnDeleteCollection(name string, lastKnownVersion string) *collectionServiceDeleteCollectionCall {
	return _c.Parent.OnDeleteCollection(name, lastKnownVersion)
}

func (_c *collectionServiceUpdateCollectionCall) OnUpdateCollection(name string, lastKnownVersion string, req *platform.UpdateCollectionReq) *collectionServiceUpdateCollectionCall {
	return _c.Parent.OnUpdateCollection(name, lastKnownVersion, req)
}

func (_c *collectionServiceUpdateCollectionCall) OnCreateCollectionRaw(req interface{}) *collectionServiceCreateCollectionCall {
	return _c.Parent.OnCreateCollectionRaw(req)
}

func (_c *collectionServiceUpdateCollectionCall) OnDeleteCollectionRaw(name interface{}, lastKnownVersion interface{}) *collectionServiceDeleteCollectionCall {
	return _c.Parent.OnDeleteCollectionRaw(name, lastKnownVersion)
}

func (_c *collectionServiceUpdateCollectionCall) OnUpdateCollectionRaw(name interface{}, lastKnownVersion interface{}, req interface{}) *collectionServiceUpdateCollectionCall {
	return _c.Parent.OnUpdateCollectionRaw(name, lastKnownVersion, req)
}
