// Code generated by mocktail; DO NOT EDIT.

package catalog

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-kubernetes/pkg/edgeingress"
)

// platformClientMock mock of PlatformClient.
type platformClientMock struct{ mock.Mock }

// newPlatformClientMock creates a new platformClientMock.
func newPlatformClientMock(tb testing.TB) *platformClientMock {
	tb.Helper()

	m := &platformClientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *platformClientMock) GetCatalogs(_ context.Context) ([]Catalog, error) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() ([]Catalog, error)); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]Catalog)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnGetCatalogs() *platformClientGetCatalogsCall {
	return &platformClientGetCatalogsCall{Call: _m.Mock.On("GetCatalogs"), Parent: _m}
}

func (_m *platformClientMock) OnGetCatalogsRaw() *platformClientGetCatalogsCall {
	return &platformClientGetCatalogsCall{Call: _m.Mock.On("GetCatalogs"), Parent: _m}
}

type platformClientGetCatalogsCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientGetCatalogsCall) Panic(msg string) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientGetCatalogsCall) Once() *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientGetCatalogsCall) Twice() *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientGetCatalogsCall) Times(i int) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientGetCatalogsCall) WaitUntil(w <-chan time.Time) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientGetCatalogsCall) After(d time.Duration) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientGetCatalogsCall) Run(fn func(args mock.Arguments)) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientGetCatalogsCall) Maybe() *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientGetCatalogsCall) TypedReturns(a []Catalog, b error) *platformClientGetCatalogsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientGetCatalogsCall) ReturnsFn(fn func() ([]Catalog, error)) *platformClientGetCatalogsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientGetCatalogsCall) TypedRun(fn func()) *platformClientGetCatalogsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *platformClientGetCatalogsCall) OnGetCatalogs() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogs()
}

func (_c *platformClientGetCatalogsCall) OnGetCertificateByDomains(domains []string) *platformClientGetCertificateByDomainsCall {
	return _c.Parent.OnGetCertificateByDomains(domains)
}

func (_c *platformClientGetCatalogsCall) OnGetWildcardCertificate() *platformClientGetWildcardCertificateCall {
	return _c.Parent.OnGetWildcardCertificate()
}

func (_c *platformClientGetCatalogsCall) OnGetCatalogsRaw() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogsRaw()
}

func (_c *platformClientGetCatalogsCall) OnGetCertificateByDomainsRaw(domains interface{}) *platformClientGetCertificateByDomainsCall {
	return _c.Parent.OnGetCertificateByDomainsRaw(domains)
}

func (_c *platformClientGetCatalogsCall) OnGetWildcardCertificateRaw() *platformClientGetWildcardCertificateCall {
	return _c.Parent.OnGetWildcardCertificateRaw()
}

func (_m *platformClientMock) GetCertificateByDomains(_ context.Context, domains []string) (edgeingress.Certificate, error) {
	_ret := _m.Called(domains)

	if _rf, ok := _ret.Get(0).(func([]string) (edgeingress.Certificate, error)); ok {
		return _rf(domains)
	}

	_ra0, _ := _ret.Get(0).(edgeingress.Certificate)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnGetCertificateByDomains(domains []string) *platformClientGetCertificateByDomainsCall {
	return &platformClientGetCertificateByDomainsCall{Call: _m.Mock.On("GetCertificateByDomains", domains), Parent: _m}
}

func (_m *platformClientMock) OnGetCertificateByDomainsRaw(domains interface{}) *platformClientGetCertificateByDomainsCall {
	return &platformClientGetCertificateByDomainsCall{Call: _m.Mock.On("GetCertificateByDomains", domains), Parent: _m}
}

type platformClientGetCertificateByDomainsCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientGetCertificateByDomainsCall) Panic(msg string) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) Once() *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) Twice() *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) Times(i int) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) WaitUntil(w <-chan time.Time) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) After(d time.Duration) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) Run(fn func(args mock.Arguments)) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) Maybe() *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) TypedReturns(a edgeingress.Certificate, b error) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) ReturnsFn(fn func([]string) (edgeingress.Certificate, error)) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) TypedRun(fn func([]string)) *platformClientGetCertificateByDomainsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_domains, _ := args.Get(0).([]string)
		fn(_domains)
	})
	return _c
}

func (_c *platformClientGetCertificateByDomainsCall) OnGetCatalogs() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogs()
}

func (_c *platformClientGetCertificateByDomainsCall) OnGetCertificateByDomains(domains []string) *platformClientGetCertificateByDomainsCall {
	return _c.Parent.OnGetCertificateByDomains(domains)
}

func (_c *platformClientGetCertificateByDomainsCall) OnGetWildcardCertificate() *platformClientGetWildcardCertificateCall {
	return _c.Parent.OnGetWildcardCertificate()
}

func (_c *platformClientGetCertificateByDomainsCall) OnGetCatalogsRaw() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogsRaw()
}

func (_c *platformClientGetCertificateByDomainsCall) OnGetCertificateByDomainsRaw(domains interface{}) *platformClientGetCertificateByDomainsCall {
	return _c.Parent.OnGetCertificateByDomainsRaw(domains)
}

func (_c *platformClientGetCertificateByDomainsCall) OnGetWildcardCertificateRaw() *platformClientGetWildcardCertificateCall {
	return _c.Parent.OnGetWildcardCertificateRaw()
}

func (_m *platformClientMock) GetWildcardCertificate(_ context.Context) (edgeingress.Certificate, error) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() (edgeingress.Certificate, error)); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(edgeingress.Certificate)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnGetWildcardCertificate() *platformClientGetWildcardCertificateCall {
	return &platformClientGetWildcardCertificateCall{Call: _m.Mock.On("GetWildcardCertificate"), Parent: _m}
}

func (_m *platformClientMock) OnGetWildcardCertificateRaw() *platformClientGetWildcardCertificateCall {
	return &platformClientGetWildcardCertificateCall{Call: _m.Mock.On("GetWildcardCertificate"), Parent: _m}
}

type platformClientGetWildcardCertificateCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientGetWildcardCertificateCall) Panic(msg string) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) Once() *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) Twice() *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) Times(i int) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) WaitUntil(w <-chan time.Time) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) After(d time.Duration) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) Run(fn func(args mock.Arguments)) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) Maybe() *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) TypedReturns(a edgeingress.Certificate, b error) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) ReturnsFn(fn func() (edgeingress.Certificate, error)) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) TypedRun(fn func()) *platformClientGetWildcardCertificateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *platformClientGetWildcardCertificateCall) OnGetCatalogs() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogs()
}

func (_c *platformClientGetWildcardCertificateCall) OnGetCertificateByDomains(domains []string) *platformClientGetCertificateByDomainsCall {
	return _c.Parent.OnGetCertificateByDomains(domains)
}

func (_c *platformClientGetWildcardCertificateCall) OnGetWildcardCertificate() *platformClientGetWildcardCertificateCall {
	return _c.Parent.OnGetWildcardCertificate()
}

func (_c *platformClientGetWildcardCertificateCall) OnGetCatalogsRaw() *platformClientGetCatalogsCall {
	return _c.Parent.OnGetCatalogsRaw()
}

func (_c *platformClientGetWildcardCertificateCall) OnGetCertificateByDomainsRaw(domains interface{}) *platformClientGetCertificateByDomainsCall {
	return _c.Parent.OnGetCertificateByDomainsRaw(domains)
}

func (_c *platformClientGetWildcardCertificateCall) OnGetWildcardCertificateRaw() *platformClientGetWildcardCertificateCall {
	return _c.Parent.OnGetWildcardCertificateRaw()
}

// oasRegistryMock mock of OASRegistry.
type oasRegistryMock struct{ mock.Mock }

// newOasRegistryMock creates a new oasRegistryMock.
func newOasRegistryMock(tb testing.TB) *oasRegistryMock {
	tb.Helper()

	m := &oasRegistryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *oasRegistryMock) GetURL(name string, namespace string) string {
	_ret := _m.Called(name, namespace)

	if _rf, ok := _ret.Get(0).(func(string, string) string); ok {
		return _rf(name, namespace)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *oasRegistryMock) OnGetURL(name string, namespace string) *oasRegistryGetURLCall {
	return &oasRegistryGetURLCall{Call: _m.Mock.On("GetURL", name, namespace), Parent: _m}
}

func (_m *oasRegistryMock) OnGetURLRaw(name interface{}, namespace interface{}) *oasRegistryGetURLCall {
	return &oasRegistryGetURLCall{Call: _m.Mock.On("GetURL", name, namespace), Parent: _m}
}

type oasRegistryGetURLCall struct {
	*mock.Call
	Parent *oasRegistryMock
}

func (_c *oasRegistryGetURLCall) Panic(msg string) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oasRegistryGetURLCall) Once() *oasRegistryGetURLCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oasRegistryGetURLCall) Twice() *oasRegistryGetURLCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oasRegistryGetURLCall) Times(i int) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oasRegistryGetURLCall) WaitUntil(w <-chan time.Time) *oasRegistryGetURLCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oasRegistryGetURLCall) After(d time.Duration) *oasRegistryGetURLCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oasRegistryGetURLCall) Run(fn func(args mock.Arguments)) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oasRegistryGetURLCall) Maybe() *oasRegistryGetURLCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oasRegistryGetURLCall) TypedReturns(a string) *oasRegistryGetURLCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *oasRegistryGetURLCall) ReturnsFn(fn func(string, string) string) *oasRegistryGetURLCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oasRegistryGetURLCall) TypedRun(fn func(string, string)) *oasRegistryGetURLCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_name := args.String(0)
		_namespace := args.String(1)
		fn(_name, _namespace)
	})
	return _c
}

func (_c *oasRegistryGetURLCall) OnGetURL(name string, namespace string) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURL(name, namespace)
}

func (_c *oasRegistryGetURLCall) OnUpdated() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdated()
}

func (_c *oasRegistryGetURLCall) OnGetURLRaw(name interface{}, namespace interface{}) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURLRaw(name, namespace)
}

func (_c *oasRegistryGetURLCall) OnUpdatedRaw() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdatedRaw()
}

func (_m *oasRegistryMock) Updated() <-chan struct{} {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() <-chan struct{}); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(<-chan struct{})

	return _ra0
}

func (_m *oasRegistryMock) OnUpdated() *oasRegistryUpdatedCall {
	return &oasRegistryUpdatedCall{Call: _m.Mock.On("Updated"), Parent: _m}
}

func (_m *oasRegistryMock) OnUpdatedRaw() *oasRegistryUpdatedCall {
	return &oasRegistryUpdatedCall{Call: _m.Mock.On("Updated"), Parent: _m}
}

type oasRegistryUpdatedCall struct {
	*mock.Call
	Parent *oasRegistryMock
}

func (_c *oasRegistryUpdatedCall) Panic(msg string) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oasRegistryUpdatedCall) Once() *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oasRegistryUpdatedCall) Twice() *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oasRegistryUpdatedCall) Times(i int) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oasRegistryUpdatedCall) WaitUntil(w <-chan time.Time) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oasRegistryUpdatedCall) After(d time.Duration) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oasRegistryUpdatedCall) Run(fn func(args mock.Arguments)) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oasRegistryUpdatedCall) Maybe() *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oasRegistryUpdatedCall) TypedReturns(a <-chan struct{}) *oasRegistryUpdatedCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *oasRegistryUpdatedCall) ReturnsFn(fn func() <-chan struct{}) *oasRegistryUpdatedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oasRegistryUpdatedCall) TypedRun(fn func()) *oasRegistryUpdatedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *oasRegistryUpdatedCall) OnGetURL(name string, namespace string) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURL(name, namespace)
}

func (_c *oasRegistryUpdatedCall) OnUpdated() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdated()
}

func (_c *oasRegistryUpdatedCall) OnGetURLRaw(name interface{}, namespace interface{}) *oasRegistryGetURLCall {
	return _c.Parent.OnGetURLRaw(name, namespace)
}

func (_c *oasRegistryUpdatedCall) OnUpdatedRaw() *oasRegistryUpdatedCall {
	return _c.Parent.OnUpdatedRaw()
}
